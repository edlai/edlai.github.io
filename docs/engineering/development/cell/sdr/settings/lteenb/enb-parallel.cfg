/* lteenb configuration file version 2018-04-01
 * Copyright (C) 2015-2017 Amarisoft
 */
{
  /* Log filter: syntax: layer.field=value[,...]
  
     Possible layers are phy, mac, rlc, pdcp, rrc, nas, s1ap, x2ap, gtpu and
     all. The 'all' layer is used to address all the layers at the
     same time.

     field values:

     - 'level': the log level of each layer can be set to 'none',
     'error', 'info' or 'debug'. Use 'debug' to log all the messages.
     
     - 'max_size': set the maximum size of the hex dump. 0 means no
       hex dump. -1 means no limit.
  */

#ifndef CELLS
#define CELLS 1
#endif

#ifndef THREADS
#define THREADS 2
#endif

#ifndef SINGLE_PORT
#define SINGLE_PORT 0
#endif

#ifndef MIMO
#define MIMO 4
#endif

#ifndef UE
#define UE 1
#endif

#ifndef RB
#define RB 100
#endif

#ifdef DEBUG
  log_options: "all.level=error,all.max_size=0,nas.level=debug,nas.max_size=1,s1ap.level=debug,rrc.level=debug,rrc.max_size=1,phy.level=debug,mac.level=debug,phy.signal=1",
#else
  log_options: "all.level=error,all.max_size=0,nas.level=debug,nas.max_size=1,s1ap.level=debug,rrc.level=debug,rrc.max_size=1",
#endif
  log_filename: "/tmp/enb0.log",

  /* Enable remote API and Web interface */
  com_addr: "0.0.0.0:9001",

  /* RF driver configuration */
  include "rf_driver/1chan.cfg",
  rx_gain: 20,


#ifdef HT
  cpu_core_list: [0, 1, 2, 3, 4, 5, 6, 7],
#endif

#if SINGLE_PORT == 1
#define CARDS (MIMO / 2)
#else
#define CARDS (MIMO * CELLS / 2)
#endif

#ifdef IP
  include "rf_driver/1chan.cfg",
#endif

  rf_driver: {
#ifdef IP
#if IP > 0
    clock_factor: IP,
#else
    use_tcp: 1,
#endif
#ifdef DEBUG
    debug: "full",
    debug_file: "/tmp/ip-enb.log",
#endif
#endif

#if CARDS == 1
     args: "dev0=/dev/sdr0"
#elif CARDS == 2
     args: "dev0=/dev/sdr0,dev1=/dev/sdr1"
#elif CARDS == 3
     args: "dev0=/dev/sdr0,dev1=/dev/sdr1,dev2=/dev/sdr2",
#elif CARDS == 4
     args: "dev0=/dev/sdr0,dev1=/dev/sdr1,dev2=/dev/sdr2,dev3=/dev/sdr3",
#elif CARDS == 5
     args: "dev0=/dev/sdr0,dev1=/dev/sdr1,dev2=/dev/sdr2,dev3=/dev/sdr3,dev4=/dev/sdr4",
#elif CARDS == 6
     args: "dev0=/dev/sdr0,dev1=/dev/sdr1,dev2=/dev/sdr2,dev3=/dev/sdr3,dev4=/dev/sdr4,dev5=/dev/sdr5",
#endif

#ifdef GPS
    sync: "gps",
#endif
  },

  nb_threads: THREADS,

  /* Antenna count definition has to be set before rf driver to allow override */
  cell_default: {
    n_antenna_dl: MIMO,
    n_antenna_ul: MIMO,
  },

  /* address of MME for S1AP connection. Must be modified if the MME
     runs on a different host. */
  mme_addr: "127.0.1.100",
  /* GTP bind address (=address of the ethernet interface connected to
     the MME). Must be modified if the MME runs on a different host. */
  gtp_addr: "127.0.1.1",

  /* high 24 bits of SIB1.cellIdentifier */
  enb_id: 0x1A2D1,

  /* list of cells */
  cell_list: [

  // Cell 1
  {
    rf_port: 0,
    /* Broadcasted PLMN identities */
    plmn_list: [
      "00101", 
    ],

#ifndef TDD
    dl_earfcn: 3200,  /* DL center frequency: 2680 MHz (Band 7) */
#else
    dl_earfcn: 40620,  /* DL center frequency: 2680 MHz (Band 7) */
#endif

    n_id_cell: 1,
    cell_id: 0x01,
    tac: 0x0001,
    root_sequence_index: 204, /* PRACH root sequence index */

#ifdef CA
    scell_list: [
#if CELLS > 1
        { cell_id: 0x02, cross_carrier_scheduling: false },
#if CELLS > 2
        { cell_id: 0x03, cross_carrier_scheduling: false }
#endif
#endif
      ],
#endif
  },

#if CELLS > 1
  // Cell 2
  {
#if SINGLE_PORT == 0
    rf_port: 1,
#endif

    /* Broadcasted PLMN identities */
    plmn_list: [
      "00101", 
    ],

    dl_earfcn: 3383,  /* DL center frequency: 2680 MHz (Band 7) */

    n_id_cell: 2,
    cell_id: 0x02,
    tac: 0x0001,
    root_sequence_index: 128, /* PRACH root sequence index */

#ifdef CA
    scell_list: [
        { cell_id: 0x01, cross_carrier_scheduling: false },
#if CELLS > 2
        { cell_id: 0x03, cross_carrier_scheduling: false }
#endif
      ],
#endif

  },
#endif
#if CELLS > 2
  {
#if SINGLE_PORT == 0
    rf_port: 2,
#endif

    /* Broadcasted PLMN identities */
    plmn_list: [
      "00101", 
    ],

    dl_earfcn: 3017,  /* DL center frequency: 2680 MHz (Band 7) */

    n_id_cell: 3,
    cell_id: 0x03,
    tac: 0x0001,
    root_sequence_index: 164, /* PRACH root sequence index */

#ifdef CA
    scell_list: [
        { cell_id: 0x01, cross_carrier_scheduling: false },
        { cell_id: 0x02, cross_carrier_scheduling: false }
      ],
#endif

  },
#endif
  ], /* cell_list */

  //sched_latency_for_prb_max: 5,

  /* default cell parameters */
  cell_default: {
    n_rb_dl: RB, /* Bandwidth: 25: 5 MHz, 50: 10 MHz, 75: 15 MHz, 100: 20 MHz */
    cyclic_prefix: "normal",

    phich_duration: "normal",
    phich_resource: "1", /* ratio of NG */

#ifdef TDD
    uldl_config: 1, /* TDD only */
    sp_config: 6, /* TDD only */
    /* PUCCH dedicated config (currently same for all UEs) */
    pucch_dedicated: {
      tdd_ack_nack_feedback_mode: "bundling", /* TDD only */
//      tdd_ack_nack_feedback_mode: "multiplexing", /* TDD only */
    },
#endif

#ifdef CA
    pucch_dedicated: {
        /* ack/nack feedback mode when carrier aggregation is
           enabled. It can be "cs" (for at most two scells) or "pucch3"
           (used in all cases if more than two cells).  */
#if CELLS > 2
        ack_nack_feedback_mode_ca: "pucch3",
#else
        ack_nack_feedback_mode_ca: "cs",
#endif

        /* TDD ack/nack feedback mode when a rel 10 UE is detected. It
           can be "bundling", "multiplexing", "cs" or "pucch3". By
           default is it the same as tdd_ack_nack_feedback_mode. */
//      tdd_ack_nack_feedback_mode_r10: "cs",

        /* number of PUCCH 1b CS resources. It determines
           the maximum number of UEs that can be scheduled in one TTI
           using carrier aggregation with PUCCH 1b CS ack/nack feedback. */ 
        n1_pucch_an_cs_count: 8,
        
        /* number of resource blocks for PUCCH 3. It determines
           the maximum number of UEs that can be scheduled in one TTI
           using carrier aggregation with PUCCH 3 ack/nack feedback. */
        n3_pucch_an_n_rb: 2,
    },
#endif

    /* System Information Block type 1 */
    sib1: "sib1.asn",

    /* other SIBs, in same order as the scheduling list in SIB 1 */
    sib_sched_list: [ `sib23_rb${RB}.asn` ],

    si_coderate: 0.20,   /* maximum code rate for SI/RA/P-RNTI messages */
    si_pdcch_format: 2, /* 2 or 3. Log2 of the number of CCEs for PDCCH
                           for SI/RA/P-RNTI */

    n_symb_cch: 0, /* number of symbols for CCH (0 = auto) */

    /* PDSCH dedicated config (currently same for all UEs) */
    pdsch_dedicated: {
#if MIMO > 1
      p_a: -3, /* dB */
#else
      p_a: 0, /* dB */
#endif
    },

    /* If defined, force for number of CCEs for UE specific PDCCH to
       2^pdcch_format. Otherwise it is computed from the reported
       CQI. Range: 0 to 3. */
    pdcch_format: 2,

    /* if defined, force the PDSCH MCS for all UEs. Otherwise it is
       computed from the reported CQI */ 
    /* pdsch_mcs: 12, */

    /* PUSCH dedicated config (currently same for all UEs) */
    pusch_dedicated: {
      beta_offset_ack_index: 9,
      beta_offset_ri_index: 6,
      beta_offset_cqi_index: 6,
    },

    /* MCS for Msg3 (=CCCH RRC Connection Request) */
    pusch_msg3_mcs: 0,

    /* this CQI value is assumed when none is received from the UE */
    initial_cqi: 3,

    /* if defined, force the PUSCH MCS for all UEs. Otherwise it is
       computed from the last received SRS/PUSCH. */ 
      //pusch_mcs: 23,

#if MIMO > 1
    /* transmission mode */
    transmission_mode: 3,
#endif

    /* Scheduling request period (ms). Must be >= 40 for HD-FDD */
    sr_period: 80, 

    /* CQI report config */
    cqi_period: 160, /* period (ms). Must be >= 32 for HD-FDD */

#if MIMO > 1
    /* RI reporting is done with a period of m_ri * cqi_period. 
       m_ri = 0 (default) disables RI reporting. */
    m_ri: 8,
#endif

#ifdef DL256QAM
    dl_256qam: true,
#endif
#ifdef UL64QAM
    enable_64qam: true,
#endif

    /* SRS dedicated config. All UEs share these
       parameters. srs_config_index and freq_domain_position are
       allocated for each UE) */ 
    srs_dedicated: {
      srs_period: 40, /* period (ms). Must be >= 40 for HD-FDD */
      srs_bandwidth: 3,
      srs_hopping_bandwidth: 0,
    },

    /* MAC configuration (same for all UEs) */
    mac_config: {
       ul_max_harq_tx: 5, /* max number of HARQ transmissions for uplink */
       dl_max_harq_tx: 5, /* max number of HARQ transmissions for downlink */
    },

    /* CPU load limitation */
    pusch_max_its: 6, /* max number of turbo decoder iterations */

    /* dynamic power control */
    dpc: true,
    dpc_pusch_snr_target: 15,
    dpc_pucch_snr_target: 10,

    /* RRC/UP ciphering algorithm preference. EEA0 is always the last. */
    cipher_algo_pref: [],
    /* RRC integrity algorithm preference. EIA0 is always the last. */
    integ_algo_pref: [2, 1],

    /* (in ms) send RRC connection release after this time of network
       inactivity */ 
    inactivity_timer: 10000,

    /* DRB configuration */
    drb_config: "drb.cfg",

    /* CPU load test */
#ifndef PROD
    pusch_mcs: 28,
    forced_cqi: 15,
    forced_ri: MIMO,
    //transmission_mode_opt: 0,
    test_mode: {
      type: "load",
      ue_count: UE,
      ue_category: 8,
      pusch_fer: 0,
      pdsch_fer: 0,
    },
#endif
  },

  sim_events: [{
    event: "cmd",
#if UE > 1
    cmd: "t g 0.2",
#else
    cmd: "t ue 0.2",
#endif
#ifndef PROD
    cmd: "t cpu 1",
#endif
  }]
}
